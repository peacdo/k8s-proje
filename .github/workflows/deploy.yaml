name: Deploy to Kubernetes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Cleanup Old Resources
      run: |
        set +e  # Continue on error
        
        echo "Starting cleanup..."
        
        # Delete old containers
        if ! docker ps -aq | xargs -r docker rm -f; then
          echo "Warning: Failed to remove some containers"
        fi
        
        # Delete old images
        if ! docker images -q | xargs -r docker rmi -f; then
          echo "Warning: Failed to remove some images"
        fi
        
        # Delete old volumes
        if ! docker volume ls -q | xargs -r docker volume rm; then
          echo "Warning: Failed to remove some volumes"
        fi
        
        # Delete old k8s resources
        if ! kubectl delete all --all -n proje --ignore-not-found=true; then
          echo "Warning: Failed to remove some k8s resources"
        fi
        
        if ! kubectl delete ingress --all -n proje --ignore-not-found=true; then
          echo "Warning: Failed to remove ingress resources"
        fi
        
        if ! kubectl delete secrets --all -n proje --ignore-not-found=true; then
          echo "Warning: Failed to remove secrets"
        fi
        
        # Clean up disk space
        if ! docker system prune -af --volumes; then
          echo "Warning: Failed to clean up some Docker resources"
        fi
        
        echo "Cleanup completed with potential warnings"
        
        set -e  # Return to normal error handling
    
    - name: Check Disk Space
      run: |
        echo "Disk space before cleanup:"
        df -h
        
        # Your cleanup steps here
        
        echo "Disk space after cleanup:"
        df -h
    
    - uses: actions/checkout@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}
    
    - name: Build Frontend
      run: |
        cd frontend
        docker build --platform linux/arm64 -t ghcr.io/peacdo/frontend:latest .
        docker push ghcr.io/peacdo/frontend:latest
    
    - name: Build Backend
      run: |
        cd backend
        docker build --platform linux/arm64 -t ghcr.io/peacdo/backend:latest .
        docker push ghcr.io/peacdo/backend:latest
    
    - name: Setup Namespace and Secrets
      run: |
        # Create namespace
        kubectl create namespace proje --dry-run=client -o yaml | kubectl apply -f -
        
        # Create secrets
        kubectl delete secret db-credentials --ignore-not-found -n proje
        kubectl create secret generic db-credentials --from-literal=password=${{ secrets.DB_PASSWORD }} -n proje
        
        kubectl delete secret ghcr-secret --ignore-not-found -n proje
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=peacdo \
          --docker-password=${{ secrets.CR_PAT }} \
          -n proje
    
    - name: Install NGINX Ingress Controller
      run: |
        if ! kubectl get namespace ingress-nginx &> /dev/null; then
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=120s
        fi
    
    - name: Deploy to Kubernetes
      if: github.ref == 'refs/heads/main'
      run: |
        # Deploy database
        kubectl apply -f k8s/database.yaml
        kubectl wait --for=condition=ready pod -l app=postgres --timeout=300s -n proje
        echo "Database pod is ready"
        
        # Deploy backend
        kubectl apply -f k8s/backend.yaml
        echo "Waiting for backend pod..."
        sleep 10
        kubectl get pods -l app=backend -o wide -n proje
        kubectl describe pod -l app=backend -n proje
        kubectl logs -l app=backend -n proje
        kubectl wait --for=condition=ready pod -l app=backend --timeout=300s -n proje
        
        # Deploy frontend
        kubectl apply -f k8s/frontend.yaml
        kubectl wait --for=condition=ready pod -l app=frontend --timeout=300s -n proje
    
    - name: Verify Deployment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Pods:"
        kubectl get pods -n proje
        echo "\nServices:"
        kubectl get services -n proje
        echo "\nIngress:"
        kubectl get ingress -n proje 